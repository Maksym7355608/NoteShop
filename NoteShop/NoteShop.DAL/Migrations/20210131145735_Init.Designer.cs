// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteShop.DAL.EF;

namespace NoteShop.DAL.Migrations
{
    [DbContext(typeof(NoteShopContext))]
    [Migration("20210131145735_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("NoteShop.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("NoteShop.Models.Likes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("NoteShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NoteShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("LikesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LikesId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NoteShop.Models.Paper", b =>
                {
                    b.HasBaseType("NoteShop.Models.Product");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("NoteShop.Models.WritingTool", b =>
                {
                    b.HasBaseType("NoteShop.Models.Product");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("RodColor")
                        .HasColumnType("bigint");

                    b.ToTable("WritingTools");
                });

            modelBuilder.Entity("NoteShop.Models.Diary", b =>
                {
                    b.HasBaseType("NoteShop.Models.Paper");

                    b.Property<long>("Cover")
                        .HasColumnType("bigint");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("NoteShop.Models.Notebook", b =>
                {
                    b.HasBaseType("NoteShop.Models.Paper");

                    b.Property<string>("Coloration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NoteType")
                        .HasColumnType("bigint");

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("NoteShop.Models.Pen", b =>
                {
                    b.HasBaseType("NoteShop.Models.WritingTool");

                    b.Property<float>("Thickness")
                        .HasColumnType("real");

                    b.ToTable("Pens");
                });

            modelBuilder.Entity("NoteShop.Models.Pencil", b =>
                {
                    b.HasBaseType("NoteShop.Models.WritingTool");

                    b.Property<long>("Roughness")
                        .HasColumnType("bigint");

                    b.ToTable("Pencils");
                });

            modelBuilder.Entity("NoteShop.Models.Product", b =>
                {
                    b.HasOne("NoteShop.Models.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("NoteShop.Models.Likes", null)
                        .WithMany("Products")
                        .HasForeignKey("LikesId");
                });

            modelBuilder.Entity("NoteShop.Models.Paper", b =>
                {
                    b.HasOne("NoteShop.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Paper", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.WritingTool", b =>
                {
                    b.HasOne("NoteShop.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.WritingTool", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Diary", b =>
                {
                    b.HasOne("NoteShop.Models.Paper", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Diary", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Notebook", b =>
                {
                    b.HasOne("NoteShop.Models.Paper", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Notebook", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Pen", b =>
                {
                    b.HasOne("NoteShop.Models.WritingTool", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Pen", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Pencil", b =>
                {
                    b.HasOne("NoteShop.Models.WritingTool", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Pencil", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NoteShop.Models.Likes", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteShop.DAL.EF;

namespace NoteShop.DAL.Migrations
{
    [DbContext(typeof(NoteShopContext))]
    [Migration("20210131154710_Init1")]
    partial class Init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("NoteShop.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("NoteShop.Models.Likes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("NoteShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NoteShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("LikesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LikesId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            Count = 100,
                            Name = "Notebook Poligraphist 12",
                            Price = 1f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 1,
                            Count = 190,
                            Name = "Notebook Poligraphist 18",
                            Price = 1.25f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 2,
                            Count = 220,
                            Name = "Notebook Poligraphist 24",
                            Price = 3.5f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 3,
                            Count = 310,
                            Name = "Notebook Poligraphist 12",
                            Price = 1.2f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 4,
                            Count = 70,
                            Name = "Notebook 1st September 48",
                            Price = 15f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 5,
                            Count = 80,
                            Name = "Notebook 1st September 18",
                            Price = 2.25f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 6,
                            Count = 150,
                            Name = "Notebook 1st September 12",
                            Price = 1.2f,
                            Type = 0L
                        },
                        new
                        {
                            Id = 7,
                            Count = 50,
                            Name = "Diary Ranok",
                            Price = 35f,
                            Type = 1L
                        },
                        new
                        {
                            Id = 8,
                            Count = 27,
                            Name = "Diary Rozumniy",
                            Price = 50f,
                            Type = 1L
                        },
                        new
                        {
                            Id = 9,
                            Count = 10,
                            Name = "Diary Elite",
                            Price = 70f,
                            Type = 1L
                        },
                        new
                        {
                            Id = 10,
                            Count = 100,
                            Name = "Pen Pilot",
                            Price = 1f,
                            Type = 2L
                        },
                        new
                        {
                            Id = 11,
                            Count = 70,
                            Name = "Pen MaxWriter",
                            Price = 4f,
                            Type = 2L
                        },
                        new
                        {
                            Id = 12,
                            Count = 40,
                            Name = "Pen BIG",
                            Price = 5f,
                            Type = 2L
                        },
                        new
                        {
                            Id = 13,
                            Count = 60,
                            Name = "Pen cells 10km",
                            Price = 10f,
                            Type = 2L
                        },
                        new
                        {
                            Id = 14,
                            Count = 170,
                            Name = "Pencil LowMarco",
                            Price = 2f,
                            Type = 3L
                        },
                        new
                        {
                            Id = 15,
                            Count = 200,
                            Name = "Pencil Marco",
                            Price = 4f,
                            Type = 3L
                        });
                });

            modelBuilder.Entity("NoteShop.Models.Paper", b =>
                {
                    b.HasBaseType("NoteShop.Models.Product");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("NoteShop.Models.WritingTool", b =>
                {
                    b.HasBaseType("NoteShop.Models.Product");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("RodColor")
                        .HasColumnType("bigint");

                    b.ToTable("WritingTools");
                });

            modelBuilder.Entity("NoteShop.Models.Diary", b =>
                {
                    b.HasBaseType("NoteShop.Models.Paper");

                    b.Property<long>("Cover")
                        .HasColumnType("bigint");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("NoteShop.Models.Notebook", b =>
                {
                    b.HasBaseType("NoteShop.Models.Paper");

                    b.Property<string>("Coloration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NoteType")
                        .HasColumnType("bigint");

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("NoteShop.Models.Pen", b =>
                {
                    b.HasBaseType("NoteShop.Models.WritingTool");

                    b.Property<float>("Thickness")
                        .HasColumnType("real");

                    b.ToTable("Pens");
                });

            modelBuilder.Entity("NoteShop.Models.Pencil", b =>
                {
                    b.HasBaseType("NoteShop.Models.WritingTool");

                    b.Property<long>("Roughness")
                        .HasColumnType("bigint");

                    b.ToTable("Pencils");
                });

            modelBuilder.Entity("NoteShop.Models.Product", b =>
                {
                    b.HasOne("NoteShop.Models.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("NoteShop.Models.Likes", null)
                        .WithMany("Products")
                        .HasForeignKey("LikesId");
                });

            modelBuilder.Entity("NoteShop.Models.Paper", b =>
                {
                    b.HasOne("NoteShop.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Paper", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.WritingTool", b =>
                {
                    b.HasOne("NoteShop.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.WritingTool", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Diary", b =>
                {
                    b.HasOne("NoteShop.Models.Paper", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Diary", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Notebook", b =>
                {
                    b.HasOne("NoteShop.Models.Paper", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Notebook", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Pen", b =>
                {
                    b.HasOne("NoteShop.Models.WritingTool", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Pen", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Pencil", b =>
                {
                    b.HasOne("NoteShop.Models.WritingTool", null)
                        .WithOne()
                        .HasForeignKey("NoteShop.Models.Pencil", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteShop.Models.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NoteShop.Models.Likes", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
